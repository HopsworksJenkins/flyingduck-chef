[Unit]
Description = Flying Duck service (Arrow Flight Server with DuckDB).
After = syslog.target network.target docker.service <%= @local_dependencies %>
Requires = docker.service <%= @local_dependencies %>

[Service]
ExecStart = /usr/bin/docker run --rm --name %n \
      --memory=<%= node['flyingduck']['memory_gbs'] %>G \
      --hostname "0.0.0.0" \
      --network "host" \
      --volume "<%= @crypto_dir %>:/srv/hops/super_crypto/flyingduck" \
      --volume "<%= node['hops']['conf_dir_parent'] %>/logs:/srv/hops/hadoop/etc" \
      --volume "<%= node['flyingduck']['log_dir'] %>/logs:/usr/src/app/logs" \
      --env "HADOOP_USER_NAME=flyingduck" \
      --env "BASE_DIR=/srv/hops" \
      <%= @registry_image %> \  
      python src/server.py \
            --nn-host=<%= @nn_fqdn %> \
            --nn-port=<%= node['hops']['nn']['port'] %> \
            --memory_limit=<%= node['flyingduck']['memory_gbs'] %> \
            --tmp_dir=/tmp/duckdb \
            --request_queue_timeout=<%= node['flyingduck']['request_timeout_sec'] %> \
            --query_result_batch_size=<%= node['flyingduck']['batch_size'] %> \
            --fqdn=<%= @flyingduck_fqdn %> \
            --port=<%= node['flyingduck']['port'] %>

ExecStop = /usr/bin/docker stop flyingduck.service

Restart = on-failure
RestartSec = 2

[Install]
WantedBy = multi-user.target
